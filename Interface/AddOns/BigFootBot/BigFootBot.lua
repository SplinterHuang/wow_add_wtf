local addonName, BigFootBot = ... _G.BigFootBot = BigFootBot local P = BigFootBot.players local A = BigFootBot.achievements local U = BigFootBot.utils local T = BigFootBot.token local frame = CreateFrame("Frame") frame:RegisterEvent("ADDON_LOADED") frame:SetScript("OnEvent", function(self, event, ...) self[event](self, ...) end) function frame:ADDON_LOADED(arg) if arg == addonName then frame:UnregisterEvent("ADDON_LOADED") BigFootBotRealmDB = {} BigFootBotCharacterDB = {} BigFootBotAccountDB = { ["fullName"] = U.UnitName("player"), ["region"] = GetCVar("portal"), ["isTrial"] = IsTrialAccount(), ["gameVersion"] = GetBuildInfo(), ["clientVersion"] = U.GetBigFootClientVersion(), ["addonVersion"] = C_AddOns.GetAddOnMetadata(addonName, "Version"), ["bigfootVersion"] = BIGFOOT_VERSION, } BigFootBotGuildDB = {} BigFootBotAchievementDB = {} BigFootBotPlayerDB = { ["base"] = {}, ["stats"] = {}, ["combatRating"] = {}, ["combatRatingBonus"] = {}, ["equipments"] = {}, ["talents"] = {}, } BigFootBotTokenDB = {} T:StartTockenPriceUpdater() frame:RegisterEvent("PLAYER_LOGOUT") frame:RegisterEvent("PLAYER_LOGIN") frame:RegisterEvent("GROUP_ROSTER_UPDATE") frame:RegisterEvent("GUILD_ROSTER_UPDATE") frame:RegisterEvent("UPDATE_MOUSEOVER_UNIT") frame:RegisterEvent("PLAYER_TARGET_CHANGED") frame:RegisterEvent("PLAYER_ENTERING_WORLD") end end function frame:PLAYER_LOGOUT() local indices = {"guid", "name", "realm", "level", "gender", "raceId", "classId", "faction", "region", "version"} for k, t in pairs(BigFootBotCharacterDB) do for _, index in pairs(indices) do if not t[index] or t[index] == "" or (index ~= "version" and t[index] == 0) then BigFootBotCharacterDB[k] = nil break end end end end function frame:PLAYER_LOGIN() BigFootBotRealmDB = { ["id"] = GetRealmID(), ["name"] = GetRealmName(), ["normalizedName"] = GetNormalizedRealmName(), ["region"] = GetCVar("portal"), } P.SavePlayerData(BigFootBotPlayerDB) P.SaveUnitBaseData(BigFootBotCharacterDB, "player", true) if not BigFootBot.isVanilla then A.SaveAchievements(BigFootBotAchievementDB) end C_GuildInfo.GuildRoster() end function frame:PLAYER_ENTERING_WORLD() frame:UnregisterEvent("PLAYER_ENTERING_WORLD") if IsInGroup() then frame:GROUP_ROSTER_UPDATE() end end function frame:GUILD_ROSTER_UPDATE() if InCombatLockdown() then frame:RegisterEvent("PLAYER_REGEN_ENABLED") frame.updateGuildRosterRequired = true return end frame:UnregisterEvent("GUILD_ROSTER_UPDATE") frame.updateGuildRosterRequired = nil if not IsInGuild() then return end local guildName, _, _, guildRealm = GetGuildInfo("player") guildRealm = guildRealm or GetNormalizedRealmName() local guildFaction = GetGuildFactionGroup() == 0 and "Horde" or "Alliance" BigFootBotGuildDB["name"] = guildName BigFootBotGuildDB["members"] = GetNumGuildMembers() BigFootBotGuildDB["realm"] = guildRealm BigFootBotGuildDB["faction"] = guildFaction BigFootBotGuildDB["region"] = BigFootBotAccountDB["region"] BigFootBotGuildDB["online"] = 0 BigFootBotGuildDB["levels"] = {} BigFootBotGuildDB["classesAtMaxLevel"] = {} local maxLevel = GetMaxLevelForExpansionLevel(LE_EXPANSION_LEVEL_CURRENT) for i = 1, BigFootBotGuildDB["members"] do local name, _, _, level, _, _, _, _, isOnline, _, classFile = GetGuildRosterInfo(i) if isOnline then BigFootBotGuildDB["online"] = BigFootBotGuildDB["online"] + 1 end local k = tostring(level) BigFootBotGuildDB["levels"][k] = (BigFootBotGuildDB["levels"][k] or 0) + 1 if level == maxLevel then local classId = tostring(U.GetClassID(classFile)) BigFootBotGuildDB["classesAtMaxLevel"][classId] = (BigFootBotGuildDB["classesAtMaxLevel"][classId] or 0) + 1 end end end local timer function frame:GROUP_ROSTER_UPDATE(immediate) if timer then timer:Cancel() timer = nil end if immediate then if InCombatLockdown() then frame.updateGroupRosterRequired = true frame:RegisterEvent("PLAYER_REGEN_ENABLED") return end frame.updateGroupRosterRequired = nil frame:UnregisterEvent("GROUP_ROSTER_UPDATE") P.SaveGroupMemberData(BigFootBotCharacterDB) else timer = C_Timer.NewTimer(5, function() timer = nil frame:GROUP_ROSTER_UPDATE(true) end) end end function frame:PLAYER_REGEN_ENABLED() frame:UnregisterEvent("PLAYER_REGEN_ENABLED") if frame.updateGuildRosterRequired then frame:GUILD_ROSTER_UPDATE() end if frame.updateGroupRosterRequired then frame:GROUP_ROSTER_UPDATE() end end function frame:UPDATE_MOUSEOVER_UNIT() if InCombatLockdown() then return end P.SaveUnitBaseData(BigFootBotCharacterDB, "mouseover", true) end function frame:PLAYER_TARGET_CHANGED() if InCombatLockdown() then return end P.SaveUnitBaseData(BigFootBotCharacterDB, "target", true) end
